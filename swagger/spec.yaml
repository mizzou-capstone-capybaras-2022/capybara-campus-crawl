openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v1
servers:
  - url: http://localhost:8090
    description: Generated server url
paths:
  /graph-nodes/:
    get:
      tags:
        - Graph Node Controller
      operationId: getNodes
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GraphNode'
  /places/:
    get:
      tags:
        - Places Controller
      operationId: getPlaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
  /doors/:
    get:
      tags:
        - Door Controller
      operationId: getDoors
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Door'
  /metrics/:
    get:
      tags:
        - Metrics Controller
      operationId: getMetrics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PiMetric'
  /buildings/:
    get:
      tags:
        - Building Controller
      operationId: getBuildings
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
  /building-route/:
    put:
      tags:
        - Route Controller
      operationId: getSimpleRouteBetweenBuildings
      summary: Get a route
      requestBody:
        description: Get the Route with a building specific route request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildingRouteRequest'
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RouteResponse'
  /routes/:
    put:
      tags:
        - Route Controller
      operationId: getRoute
      summary: Get a route
      requestBody:
        description: Get the Route with a generic route request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteRequest'
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '500':
          description: Route not possible
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RouteErrorResponse'

components:
  schemas:
    GraphNode:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        description:
          type: string
        nodeID:
          type: integer
          format: int64
    GraphEdge:
      type: object
      properties:
        edgeId:
          type: integer
          format: int64
        fromNode:
          $ref: '#/components/schemas/GraphNode'
        toNode:
          $ref: '#/components/schemas/GraphNode'
        fromToAction:
          type: string
        toFromAction:
          type: string
        distance:
          type: number
          format: double
        pathshape:
          type: string
        bidirectional:
          type: boolean
    Building:
      type: object
      properties:
        buildingId:
          type: integer
          format: int64
        name:
          type: string
        geojson:
          type: string
        graphNode:
          $ref: '#/components/schemas/GraphNode'
        nodeID:
          type: integer
          format: int64
    Place:
      type: object
      properties:
        placeID:
          type: integer
          format: int64
        node:
          $ref: '#/components/schemas/GraphNode'
        placeType:
          type: string
          enum:
            - STUDY
            - DINING
            - CLASSROOM
    Door:
      type: object
      properties:
        doorId:
          type: integer
          format: int64
        node:
          $ref: '#/components/schemas/GraphNode'
        building:
          $ref: '#/components/schemas/Building'
    PiMetric:
      type: object
      properties:
        metricId:
          type: integer
          format: int64
        node:
          $ref: '#/components/schemas/GraphNode'
        time:
          type: string
          format: date-time
        intensity:
          type: integer
          format: int32
    Point:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    BuildingLocation:
      type: object
      properties:
        buildingId:
          type: number
          format: integer
    Location:
      oneOf:
        - $ref: '#/components/schemas/BuildingLocation'
        - $ref: '#/components/schemas/Point'
        
    TimeConstraint:
      type: object
      required:
        - maxTime
      properties:
        maxTime:
          # assume minutes
          type: number
          format: double
              
    PitstopConstraint:
      type: object
      required:
        - location
      properties:
        location:
          $ref: '#/components/schemas/Location'
    BuildingRouteRequest:
      type: object
      properties:
        fromBuilding:
          $ref: '#/components/schemas/BuildingLocation'
        toBuilding:
          $ref: '#/components/schemas/BuildingLocation'
    RouteRequestConstraints:
      type: object
      properties:
        stopForFood:
          type: boolean
        preferIndoors:
          type: boolean
        avoidCrowds:
          type: boolean
        pitstops:
          type: array
          items:
            $ref: '#/components/schemas/PitstopConstraint'
        timeConstraint:
          $ref: '#/components/schemas/TimeConstraint'
    RouteRequest:
      type: object
      properties:
        fromLocation:
          $ref: '#/components/schemas/Location'
        toLocation:
          $ref: '#/components/schemas/Location'
        constraints:
          $ref: '#/components/schemas/RouteRequestConstraints'
    RouteResponse:
      type: array
      items:
        $ref: '#/components/schemas/Point'
    RouteErrorResponse:
      type: object
      properties:
        failingConstraint:
          type: array
          items:
            type: string
            enum: [food, pitstop, time, crowds, route]
            