{
	"info": {
		"_postman_id": "89597090-8b07-40a5-8ad1-e635965bb336",
		"name": "Backend Capybara Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Graph Nodes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json()\r",
							"\r",
							"const schema = {\r",
							"    \"properties\": {\r",
							"        \"latitude\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"longitude\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"nodeID\": {\r",
							"            \"type\": \"number\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"Proper Node Schema\", function () {\r",
							"    response.forEach(function (responseItem){\r",
							"        pm.expect(tv4.validate(responseItem, schema)).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Node Count\", function () {\r",
							"    pm.expect(response.length).to.equal(186);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/graph-nodes/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"graph-nodes",
						""
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/graph-nodes/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graph-nodes",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"latitude\": -26464565.428904667,\n  \"longitude\": 19935425.061863303,\n  \"description\": \"ad laborum Excepteur non\",\n  \"nodeID\": -77117104\n },\n {\n  \"latitude\": -10492079.627488375,\n  \"longitude\": -33686811.25483391,\n  \"description\": \"ipsum\",\n  \"nodeID\": 20169110\n }\n]"
				}
			]
		},
		{
			"name": "Get Doors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json()\r",
							"\r",
							"const buildingSchema = {\r",
							"    \"properties\": {\r",
							"        \"buildingId\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"geojson\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"nodeID\": {\r",
							"            \"type\": \"number\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"const doorSchema = {\r",
							"    \"properties\": {\r",
							"        \"buildingId\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"geojson\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"nodeID\": {\r",
							"            \"type\": \"number\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"const nodeSchema = {\r",
							"    \"properties\": {\r",
							"        \"doorId\": {\r",
							"            \"type\": \"number\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Has nested Building Schema\", function () {\r",
							"    response.forEach(function (responseItem){\r",
							"        let buildingExists = responseItem.hasOwnProperty(\"building\");\r",
							"        let buildingToTest = responseItem[\"building\"];\r",
							"        pm.expect(buildingExists).to.be.true;\r",
							"        pm.expect(buildingToTest).to.be.not.null;\r",
							"        pm.expect(tv4.validate(buildingToTest, buildingSchema)).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Has nested Node Schema\", function () {\r",
							"    response.forEach(function (responseItem){\r",
							"        let graphNodeExists = responseItem.hasOwnProperty(\"node\");\r",
							"        let graphNodeToTest = responseItem[\"node\"];\r",
							"        pm.expect(graphNodeExists).to.be.true;\r",
							"        pm.expect(graphNodeToTest).to.be.not.null;\r",
							"        pm.expect(tv4.validate(graphNodeToTest, nodeSchema)).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Has nested Building Schema\", function () {\r",
							"    response.forEach(function (responseItem){\r",
							"        let graphNodeExists = responseItem.hasOwnProperty(\"node\");\r",
							"        let graphNodeToTest = responseItem[\"node\"];\r",
							"        pm.expect(graphNodeExists).to.be.true;\r",
							"        pm.expect(graphNodeToTest).to.be.not.null;\r",
							"        pm.expect(tv4.validate(graphNodeToTest, nodeSchema)).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Proper Door Schema\", function () {\r",
							"    response.forEach(function (responseItem){\r",
							"        pm.expect(tv4.validate(responseItem, doorSchema)).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Door Count\", function () {\r",
							"    pm.expect(response.length).to.equal(115);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/doors/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"doors",
						""
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/doors/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"doors",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"doorId\": -24617631,\n  \"node\": {\n   \"latitude\": 69791564.62497365,\n   \"longitude\": 53027190.54681718,\n   \"description\": \"commodo magna Duis\",\n   \"nodeID\": 68800112\n  },\n  \"building\": {\n   \"buildingId\": 20775014,\n   \"name\": \"anim veniam aliquip cupidatat\",\n   \"geojson\": \"cupidatat eu Lor\",\n   \"graphNode\": {\n    \"latitude\": 32231298.70699668,\n    \"longitude\": 62358727.91564283,\n    \"description\": \"officia nisi et enim\",\n    \"nodeID\": 25172666\n   },\n   \"nodeID\": 37225836\n  }\n },\n {\n  \"doorId\": 30817550,\n  \"node\": {\n   \"latitude\": 89604530.82242313,\n   \"longitude\": 51931952.756824225,\n   \"description\": \"non aliquip in\",\n   \"nodeID\": -78788745\n  },\n  \"building\": {\n   \"buildingId\": 29939814,\n   \"name\": \"et culpa in\",\n   \"geojson\": \"in culpa sed consectetur\",\n   \"graphNode\": {\n    \"latitude\": -7093338.440164357,\n    \"longitude\": -23068950.358650222,\n    \"description\": \"tempor Lorem u\",\n    \"nodeID\": -14108030\n   },\n   \"nodeID\": -52697217\n  }\n }\n]"
				}
			]
		},
		{
			"name": "Get Buildings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json()\r",
							"\r",
							"const buildingSchema = {\r",
							"    \"properties\": {\r",
							"        \"buildingId\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"geojson\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"nodeID\": {\r",
							"            \"type\": \"number\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"const nodeSchema = {\r",
							"    \"properties\": {\r",
							"        \"latitude\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"longitude\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"nodeID\": {\r",
							"            \"type\": \"number\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Has nested Node Schema\", function () {\r",
							"    response.forEach(function (responseItem){\r",
							"        let graphNodeExists = responseItem.hasOwnProperty(\"graphNode\");\r",
							"        let graphNodeToTest = responseItem[\"graphNode\"];\r",
							"        pm.expect(graphNodeExists).to.be.true;\r",
							"        pm.expect(graphNodeToTest).to.be.not.null;\r",
							"        pm.expect(tv4.validate(graphNodeToTest, nodeSchema)).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Proper Building Schema\", function () {\r",
							"    response.forEach(function (responseItem){\r",
							"        pm.expect(tv4.validate(responseItem, buildingSchema)).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Building Count\", function () {\r",
							"    pm.expect(response.length).to.equal(104);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/buildings/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"buildings",
						""
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/buildings/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"buildings",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"buildingId\": 63161456,\n  \"name\": \"in quis ipsum veniam\",\n  \"geojson\": \"dolore velit\",\n  \"graphNode\": {\n   \"latitude\": 21889221.151769564,\n   \"longitude\": 15154181.96679464,\n   \"description\": \"consectetur\",\n   \"nodeID\": 36514048\n  },\n  \"nodeID\": 15949037\n },\n {\n  \"buildingId\": -38714036,\n  \"name\": \"cupidatat Lorem officia anim\",\n  \"geojson\": \"commodo aliquip nisi ea\",\n  \"graphNode\": {\n   \"latitude\": 64653345.52951267,\n   \"longitude\": 49485535.68229276,\n   \"description\": \"labore velit\",\n   \"nodeID\": -47282245\n  },\n  \"nodeID\": -99483793\n }\n]"
				}
			]
		},
		{
			"name": "Get a route",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json()\r",
							"\r",
							"function distance(lat1, lon1, lat2, lon2){\r",
							"    const R = 6371e3; // metres\r",
							"    const φ1 = lat1 * Math.PI/180; // φ, λ in radians\r",
							"    const φ2 = lat2 * Math.PI/180;\r",
							"    const Δφ = (lat2-lat1) * Math.PI/180;\r",
							"    const Δλ = (lon2-lon1) * Math.PI/180;\r",
							"\r",
							"    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\r",
							"            Math.cos(φ1) * Math.cos(φ2) *\r",
							"            Math.sin(Δλ/2) * Math.sin(Δλ/2);\r",
							"    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r",
							"\r",
							"    const d = R * c; // in metres\r",
							"\r",
							"    return d;\r",
							"}\r",
							"\r",
							"const pointSchema = {\r",
							"    \"properties\": {\r",
							"        \"latitude\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"longitude\": {\r",
							"            \"type\": \"number\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"Proper Path Schema\", function () {\r",
							"    response.forEach(function (responseItem){\r",
							"        pm.expect(tv4.validate(responseItem, pointSchema)).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ensure proper route endpoints\", function () {\r",
							"    let startingBuilding = pm.environment.get(\"fromBuilding\");\r",
							"    let endingBuilding = pm.environment.get(\"toBuilding\");\r",
							"    \r",
							"    let startingPoint = response[0];\r",
							"    let endingPoint = response[response.length - 1];\r",
							"\r",
							"    console.log(\"Start: \");\r",
							"    let [buildingStartLat,buildingStartLong] = [startingBuilding[\"graphNode\"][\"latitude\"], startingBuilding[\"graphNode\"][\"longitude\"]]\r",
							"    let [buildingEndLat, buildingEndLong] = [endingBuilding[\"graphNode\"][\"latitude\"], endingBuilding[\"graphNode\"][\"longitude\"]];\r",
							"    let [pointEndLat, pointEndLong] = [endingPoint[\"latitude\"], endingPoint[\"longitude\"]];\r",
							"\r",
							"    let [pointStartLat, pointStartLong] = [startingPoint[\"latitude\"], startingPoint[\"longitude\"]]\r",
							"\r",
							"    let startDistance = distance(buildingStartLat, buildingStartLong, pointStartLat, pointStartLong);\r",
							"    let endDistance = distance(buildingEndLat, buildingEndLong, pointEndLat, pointEndLong);\r",
							"\r",
							"    console.log(\"\\tBuilding Name: \" + startingBuilding[\"name\"])\r",
							"    console.log(\"\\tBuilding Location: \" + [buildingStartLat,buildingStartLong]);\r",
							"    console.log(\"\\tBuilding Point Location: \" + [pointStartLat, pointStartLong]);\r",
							"    console.log(\"\\tDistance (meter): \" + startDistance);\r",
							"\r",
							"    console.log(\"End: \");\r",
							"    console.log(\"\\tBuilding Name: \" + endingBuilding[\"name\"])\r",
							"    console.log(\"\\tBuilding Location: \" + [buildingEndLat, buildingEndLong]);\r",
							"    console.log(\"\\tBuilding Point Location: \" + [pointEndLat, pointEndLong]);\r",
							"    console.log(\"\\tDistance (meter): \" + endDistance);\r",
							"\r",
							"    pm.expect(startDistance).to.be.within(0, 200);\r",
							"    pm.expect(endDistance).to.be.within(0, 200);\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var buildingFromId = 1;\r",
							"var buildingToId = 2;\r",
							"\r",
							"pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/buildings/\", (error, response) => {\r",
							"    if (error) {\r",
							"        console.log(error);\r",
							"    }else{\r",
							"        let buildings = response.json();\r",
							"        const index1 = Math.trunc(Math.random() * buildings.length);\r",
							"        const index2 = Math.trunc(Math.random() * buildings.length);\r",
							"\r",
							"        buildingFrom = buildings[index1];\r",
							"        buildingTo = buildings[index2];\r",
							"\r",
							"        pm.environment.set(\"fromBuilding\", buildingFrom);\r",
							"        pm.environment.set(\"toBuilding\", buildingTo);\r",
							"        pm.environment.set(\"fromId\", buildingFrom[\"buildingId\"]);\r",
							"        pm.environment.set(\"toId\", buildingTo[\"buildingId\"]);\r",
							"    }\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fromBuilding\": {\n        \"buildingId\": {{fromId}}\n    },\n    \"toBuilding\": {\n        \"buildingId\": {{toId}}\n    }\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/building-route/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"building-route",
						""
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fromBuilding\": {\n        \"buildingId\": 66532909.90963626\n    },\n    \"toBuilding\": {\n        \"buildingId\": -94145379.68055576\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/building-route/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"building-route",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"latitude\": -29501667.665326223,\n  \"longitude\": -380653.44631785154\n },\n {\n  \"latitude\": -21103190.589093894,\n  \"longitude\": -97611235.94014083\n }\n]"
				}
			]
		},
		{
			"name": "get Places",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/places/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"places",
						""
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/places/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"placeID\": -19051701,\n \"node\": {\n  \"latitude\": -47699180.58116747,\n  \"longitude\": 34953450.987912536,\n  \"description\": \"ipsum dolore\",\n  \"nodeID\": 33999664\n },\n \"placeType\": \"DINING\"\n}"
				}
			]
		},
		{
			"name": "Get a constaint route (given no constraints)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var buildingFromId = 1;\r",
							"var buildingToId = 2;\r",
							"\r",
							"pm.sendRequest(pm.collectionVariables.get(\"baseUrl\") + \"/buildings/\", (error, response) => {\r",
							"    if (error) {\r",
							"        console.log(error);\r",
							"    }else{\r",
							"        let buildings = response.json();\r",
							"        const index1 = Math.trunc(Math.random() * buildings.length);\r",
							"        const index2 = Math.trunc(Math.random() * buildings.length);\r",
							"\r",
							"        buildingFrom = buildings[index1];\r",
							"        buildingTo = buildings[index2];\r",
							"\r",
							"        pm.environment.set(\"fromBuilding\", buildingFrom);\r",
							"        pm.environment.set(\"toBuilding\", buildingTo);\r",
							"        pm.environment.set(\"fromId\", buildingFrom[\"buildingId\"]);\r",
							"        pm.environment.set(\"toId\", buildingTo[\"buildingId\"]);\r",
							"    }\r",
							"}); "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json()\r",
							"\r",
							"function distance(lat1, lon1, lat2, lon2){\r",
							"    const R = 6371e3; // metres\r",
							"    const φ1 = lat1 * Math.PI/180; // φ, λ in radians\r",
							"    const φ2 = lat2 * Math.PI/180;\r",
							"    const Δφ = (lat2-lat1) * Math.PI/180;\r",
							"    const Δλ = (lon2-lon1) * Math.PI/180;\r",
							"\r",
							"    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\r",
							"            Math.cos(φ1) * Math.cos(φ2) *\r",
							"            Math.sin(Δλ/2) * Math.sin(Δλ/2);\r",
							"    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r",
							"\r",
							"    const d = R * c; // in metres\r",
							"\r",
							"    return d;\r",
							"}\r",
							"\r",
							"const pointSchema = {\r",
							"    \"properties\": {\r",
							"        \"latitude\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"longitude\": {\r",
							"            \"type\": \"number\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"Proper Path Schema\", function () {\r",
							"    response.forEach(function (responseItem){\r",
							"        pm.expect(tv4.validate(responseItem, pointSchema)).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ensure proper route endpoints\", function () {\r",
							"    let startingBuilding = pm.environment.get(\"fromBuilding\");\r",
							"    let endingBuilding = pm.environment.get(\"toBuilding\");\r",
							"    \r",
							"    let startingPoint = response[0];\r",
							"    let endingPoint = response[response.length - 1];\r",
							"\r",
							"    console.log(\"Start: \");\r",
							"    let [buildingStartLat,buildingStartLong] = [startingBuilding[\"graphNode\"][\"latitude\"], startingBuilding[\"graphNode\"][\"longitude\"]]\r",
							"    let [buildingEndLat, buildingEndLong] = [endingBuilding[\"graphNode\"][\"latitude\"], endingBuilding[\"graphNode\"][\"longitude\"]];\r",
							"    let [pointEndLat, pointEndLong] = [endingPoint[\"latitude\"], endingPoint[\"longitude\"]];\r",
							"\r",
							"    let [pointStartLat, pointStartLong] = [startingPoint[\"latitude\"], startingPoint[\"longitude\"]]\r",
							"\r",
							"    let startDistance = distance(buildingStartLat, buildingStartLong, pointStartLat, pointStartLong);\r",
							"    let endDistance = distance(buildingEndLat, buildingEndLong, pointEndLat, pointEndLong);\r",
							"\r",
							"    console.log(\"\\tBuilding Name: \" + startingBuilding[\"name\"])\r",
							"    console.log(\"\\tBuilding Location: \" + [buildingStartLat,buildingStartLong]);\r",
							"    console.log(\"\\tBuilding Point Location: \" + [pointStartLat, pointStartLong]);\r",
							"    console.log(\"\\tDistance (meter): \" + startDistance);\r",
							"\r",
							"    console.log(\"End: \");\r",
							"    console.log(\"\\tBuilding Name: \" + endingBuilding[\"name\"])\r",
							"    console.log(\"\\tBuilding Location: \" + [buildingEndLat, buildingEndLong]);\r",
							"    console.log(\"\\tBuilding Point Location: \" + [pointEndLat, pointEndLong]);\r",
							"    console.log(\"\\tDistance (meter): \" + endDistance);\r",
							"\r",
							"    pm.expect(startDistance).to.be.within(0, 200);\r",
							"    pm.expect(endDistance).to.be.within(0, 200);\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fromLocation\": {\n        \"buildingId\": {{fromId}}\n    },\n    \"toLocation\": {\n        \"buildingId\": {{toId}}\n    },\n    \"constraints\": {\n        \"stopForFood\": false,\n        \"preferIndoors\": false,\n        \"avoidCrowds\": false,\n        \"pitstops\": [],\n        \"timeConstraint\": null\n    }\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/routes/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"routes",
						""
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fromLocation\": {\n        \"buildingId\": 1\n    },\n    \"toLocation\": {\n        \"buildingId\": 2\n    },\n    \"constraints\": {\n        \"stopForFood\": true,\n        \"preferIndoors\": false,\n        \"avoidCrowds\": true,\n        \"pitstops\": [\n            {\n                \"location\": {\n                    \"buildingId\": 4\n                }\n            },\n            {\n                \"location\": {\n                    \"buildingId\": 5\n                }\n            }\n        ],\n        \"timeConstraint\": {\n            \"maxTime\": 100\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/routes/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"routes",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"latitude\": -13290201.183931544,\n  \"longitude\": 92428659.31701955\n },\n {\n  \"latitude\": 48131450.59189895,\n  \"longitude\": 32371157.98228647\n }\n]"
				},
				{
					"name": "Route not possible",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fromLocation\": {\n        \"buildingId\": -80489843.49325989\n    },\n    \"toLocation\": {\n        \"buildingId\": -10528911.906426638\n    },\n    \"constraints\": {\n        \"stopForFood\": false,\n        \"preferIndoors\": true,\n        \"avoidCrowds\": true,\n        \"pitstops\": [\n            {\n                \"location\": {\n                    \"buildingId\": 85429174.38149291\n                }\n            },\n            {\n                \"location\": {\n                    \"buildingId\": 68633317.8765381\n                }\n            }\n        ],\n        \"timeConstraint\": {\n            \"maxTime\": 90138768.03969437\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/routes/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"routes",
								""
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"failingConstraint\": [\n  \"time\",\n  \"crowds\"\n ]\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8090"
		}
	]
}